(()=>{function o(o){const e=document.getElementById("error-container"),n=document.getElementById("error-message");if(e&&n){n.textContent=o,e.style.display="flex";const t=document.getElementById("loading");t&&(t.style.display="none")}else console.error("エラー表示要素が見つかりません: "+o),alert(o)}function e(){console.log("🎉 アプリ初期化完了イベントを発行します");try{document.dispatchEvent(new CustomEvent("liff-initialized"))}catch(o){try{const o=document.createEvent("CustomEvent");o.initCustomEvent("liff-initialized",!0,!0,{}),document.dispatchEvent(o)}catch(o){console.error("CustomEvent作成エラー:",o),s("CustomEvent作成エラー: "+o,"ERROR")}}}(()=>{let n=!1,t=0;const l="liff_login_attempted";function s(o,e="INFO"){const n=`${(new Date).toISOString()} [${e}] ${o}`;console.log(n),fetch("../api/log_writer.php",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({file:"liff-init.log",message:n,type:e})}).catch((o=>console.error("ログ書き込みエラー:",o)))}function r(o){console.error("LIFF Error:",o),s("LIFF Error: "+o,"ERROR");const e=document.getElementById("error-container"),n=document.getElementById("error-message");if(e&&n){n.textContent=o,e.style.display="flex";const t=document.getElementById("loading");t&&(t.style.display="none")}try{document.dispatchEvent(new CustomEvent("liff-error",{detail:{message:o}}))}catch(e){try{const e=document.createEvent("CustomEvent");e.initCustomEvent("liff-error",!0,!0,{message:o}),document.dispatchEvent(e)}catch(o){console.error("CustomEvent作成エラー:",o),s("CustomEvent作成エラー: "+o,"ERROR")}}}function i(){if(console.log("📋 --- LINEログイン状態チェックシーケンス開始 --- 📋"),n)return s("既に初期化済みのためスキップします","INFO"),console.log("⏭️ LIFF初期化済み: チェックをスキップします"),Promise.resolve(!0);if(s("LIFF初期化を開始します...","INFO"),"undefined"==typeof liff){if(t>=3)return r("アプリケーションの初期化中にエラーが発生しました。LIFF SDKが読み込まれていません。"),console.log("❌ 致命的エラー: LIFF SDKが見つかりません（最大試行回数到達）"),Promise.reject(new Error("LIFF SDK not available after multiple attempts"));t++;const o=`LIFF SDKが見つかりません。再試行 (${t}/3)...`;return console.warn("⚠️ "+o),s(o,"WARN"),new Promise((o=>{setTimeout((()=>{o(i())}),1e3)}))}if(!window.LIFF_ID){s("LIFF IDが設定されていません","ERROR"),s("document.readyState = "+document.readyState,"DEBUG"),s("window.LIFF_ID = "+window.LIFF_ID,"DEBUG"),console.log("❌ LIFF ID未設定エラー: window.LIFF_ID = "+(window.LIFF_ID||"undefined"));try{s("window keys: "+Object.keys(window).join(", "),"DEBUG")}catch(o){s("window keys 取得エラー: "+o,"DEBUG")}return r("LIFF IDが設定されていません"),Promise.reject(new Error("LIFF ID not set"))}console.log("🔍 ログインフラグをチェックしています...");const c=localStorage.getItem(l),I=localStorage.getItem(l+"_time"),a=Date.now();console.log("🔑 ログイン状態チェック:"),console.log(`  • フラグ: ${null===c?"未設定":c}`),console.log(`  • 設定時刻: ${I?new Date(parseInt(I,10)).toLocaleString():"未設定"}`);const g=void 0===window.LINE_LOGIN_REQUIRED||window.LINE_LOGIN_REQUIRED,d=void 0===window.ROOM_LINK_REQUIRED||window.ROOM_LINK_REQUIRED;console.log("  • LINEログイン必須設定: "+(g?"有効":"無効")),console.log("  • 部屋連携必須設定: "+(d?"有効":"無効"));const m=new URLSearchParams(window.location.search),f=m.get("code")&&m.get("state"),u=function(){try{const o=sessionStorage.getItem("line_auth_params");if(o){const e=JSON.parse(o);if(Date.now()-e.timestamp<3e5)return e;console.log("🕒 保存された認証情報が古いため無視します"),sessionStorage.removeItem("line_auth_params")}}catch(o){console.error("保存された認証情報の取得に失敗:",o)}return null}(),E=u&&u.code&&u.state;console.log("  • URL内の認証コード: "+(f?"あり":"なし")),console.log("  • セッション内の認証コード: "+(E?"あり":"なし")),(f||E)&&(console.log("✅ 認証コードを検出: ログインフラグをセットします"),s("認証コード検出: ログインフラグをセット","INFO"),localStorage.setItem(l,"1"),localStorage.setItem(l+"_time",Date.now().toString()),console.log("💾 ログインフラグを保存しました（認証コード検出）")),null===c?console.log("🚫 ログインフラグが存在しません"):(console.log(`✅ ログインフラグを発見しました: ${c}`),I&&console.log(`⏱️ ログインフラグ設定時刻: ${new Date(parseInt(I,10)).toLocaleString()}`)),I&&a-parseInt(I,10)>18e5?(s("古いログインフラグを検出（30分以上前）- フラグをリセット","INFO"),console.log("⏰ ログインフラグが30分以上前のものなので削除します"),localStorage.removeItem(l),localStorage.removeItem(l+"_time")):s(`LINEログイン状態フラグ: ${c?"true":"false"}, LINEに${c?"ログインしてます":"ログインしていません"}, 時間: ${I?new Date(parseInt(I,10)).toISOString():"未設定"}`,"INFO"),s("LIFF初期化パラメータ: ID="+window.LIFF_ID,"INFO"),console.log(`🔐 LIFF ID: ${window.LIFF_ID} で初期化を開始します`);const L={liffId:window.LIFF_ID,withLoginOnExternalBrowser:!0};return"function"==typeof liff.getVersion&&s("LIFF SDKバージョン: "+liff.getVersion(),"INFO"),liff.init(L).then((()=>{s("LIFF初期化成功","INFO"),n=!0,console.log("✅ LIFF初期化成功"),console.log("🔄 LIFF初期化成功後、再度ログインフラグをチェックしています...");const t=localStorage.getItem(l);null===t?console.log("🚫 ログインフラグは設定されていません"):console.log(`✅ ログインフラグが設定されています: ${t}`),s(`LOGIN FLAG 取得結果: ${t}`,"INFO");const i=liff.isLoggedIn();if(console.log("👤 LINEログイン状態チェック: "+(i?"ログイン済み ✓":"未ログイン ✗")),s("LINEログイン状態: "+(i?"ログイン済み":"未ログイン"),"INFO"),s("LINEログイン必須設定: "+(g?"有効":"無効"),"INFO"),console.log("⚠️ LINEログイン必須設定: "+(g?"有効":"無効")),!i&&g)return console.log("⚠️ LINEにログインしていません"),s("liff.isLoggedIn()==false","INFO"),"1"===t?(s("フラグ=1 のため再ログインを中止（ループ防止）","WARN"),console.log("🔄 ログインループ防止: フラグが既に設定されているためログインをスキップします"),console.log("⛔ ログイン中止: ユーザーによる操作が必要です"),r("LINEログインに失敗しました。LINEアプリで開き直すか再読み込みしてください。"),!1):(s("フラグ未設定 - フラグをセットして liff.login() 実行","INFO"),console.log("🔐 ログイン処理を実行します"),localStorage.setItem(l,"1"),localStorage.setItem(l+"_time",Date.now().toString()),console.log("💾 ログインフラグをローカルストレージに保存しました"),console.log("↪️ liff.login()を実行します - LINEログイン画面にリダイレクトします"),s("LINEログインリダイレクト実行前 - ページ読み込みをスキップ","INFO"),console.log("🔄 LINEログインリダイレクト実行前 - ページ読み込みをスキップします"),liff.login(),!1);"1"===t&&(s("ログイン成功 - フラグをクリア","INFO"),console.log("🎉 LINEにログインしました！フラグをクリアします"),localStorage.removeItem(l),localStorage.removeItem(l+"_time"),console.log("🗑️ ログインフラグを削除しました")),console.log("🔍 LINE IDを取得しています...");try{let n=null;try{n=liff.getDecodedIDToken().sub;const o=(c=n)?"string"!=typeof c||c.length<10?(console.log(`❌ LINE ID取得失敗: 無効なIDフォーマット - ${c}`),{status:"error",message:"LINE IDが無効です",details:"無効なIDフォーマット",id:c}):(console.log(`✅ LINE ID取得成功: ${c.substring(0,5)}...`),{status:"success",message:"LINE IDが正常に取得されました",details:"",id:c,maskedId:c.substring(0,5)+"..."+c.substring(c.length-3)}):(console.log("❌ LINE ID取得失敗: IDがnullまたはundefinedです"),{status:"error",message:"LINE IDが取得できませんでした",details:"IDがnullまたはundefinedです",id:null});if("success"!==o.status)return s("ユーザーID取得失敗: "+o.message,"ERROR"),console.log(`❌ LINE ID取得失敗: ${o.message}`),r("LINE IDの取得に失敗しました。LINEで再ログインしてください。"),!1;s("ユーザーID取得成功: "+o.maskedId,"INFO"),console.log(`✅ LINE ID取得成功: ${o.maskedId}`),console.log(`✅ LINE ID詳細: ${JSON.stringify(o)}`),window.LINE_USER_ID=n}catch(o){return s("ユーザーID取得中にエラー発生: "+o,"ERROR"),console.log(`❌ LINE ID取得中にエラー発生: ${o}`),r("LINE IDの取得中にエラーが発生しました。LINEで再ログインしてください。"),!1}return n&&d?(console.log("👤 LINEプロフィール情報を取得しています..."),liff.getProfile().then((t=>(console.log(`👤 プロフィール取得成功: ${t.displayName}`),s("プロフィール取得成功: "+t.displayName,"INFO"),n?(console.log("🔄 部屋連携状態を確認しています..."),function(o){if(!o)return console.log("❌ ユーザーID未指定: 部屋連携確認できません"),s("ユーザーIDが指定されていません","ERROR"),Promise.resolve({linked:!1,active:!1,error:!0});const e=Date.now();return console.log(`🔍 LINE ID: ${o.substring(0,5)}... で部屋連携確認中`),s("部屋連携確認API呼び出し: user="+o.substring(0,5)+"...","INFO"),fetch(`api/v1/check-room-link.php?line_user_id=${encodeURIComponent(o)}&_=${e}`).then((o=>{if(!o.ok)throw console.log(`❌ API応答エラー: ${o.status}`),s(`APIエラー: ${o.status}`,"ERROR"),new Error(`APIエラー: ${o.status}`);return o.json()})).then((o=>{if(o&&o.success){if(o.is_linked){if(console.log(`✅ 部屋連携あり: ${o.room_info.room_number||"unknown"}`),!1===o.room_info.is_active||"0"===o.room_info.is_active||0===o.room_info.is_active)return console.log("⚠️ 部屋連携は非アクティブ状態です"),s("部屋連携あり（非アクティブ）: room="+(o.room_info.room_number||"unknown"),"WARN"),{linked:!0,active:!1,room_info:o.room_info};s("部屋連携あり: room="+(o.room_info.room_number||"unknown"),"INFO"),window.roomInfo=o.room_info;const e=document.getElementById("room-number");return e&&o.room_info.room_number&&(e.textContent=o.room_info.room_number),{linked:!0,active:!0,room_info:o.room_info}}return console.log("❌ 部屋連携なし: 登録が必要です"),s("部屋連携なし","WARN"),{linked:!1,active:!1}}return console.log(`❌ API応答異常: ${JSON.stringify(o)}`),s("API応答エラー: "+JSON.stringify(o),"ERROR"),{linked:!1,active:!1,error:!0}})).catch((o=>(console.log(`❌ API通信エラー: ${o}`),s("API通信エラー: "+o,"ERROR"),{linked:!1,active:!1,error:!0})))}(n).then((t=>t.error?(console.log("⚠️ 部屋連携確認中にエラーが発生しました"),o("サーバーとの通信に失敗しました。ページを再読み込みしてください。"),!1):t.linked?t.active?(console.log("✅ 部屋連携OK: アプリ初期化完了"),s("部屋連携あり - アプリ初期化完了","INFO"),e(),!0):(console.log("⚠️ 部屋連携は非アクティブです"),o("この部屋は現在ご利用いただけません。フロントにお問い合わせください。"),!1):(console.log("📝 部屋連携なし: 登録画面表示"),s("部屋連携なし - 登録画面を表示","INFO"),function(o){console.log("📋 部屋登録フォームを表示します"),s("部屋登録フォームを表示 - ページ読み込みをスキップ","INFO");const e=document.getElementById("error-container"),n=document.getElementById("error-message");if(e&&n){n.innerHTML=`\n                LINEアカウントと部屋を連携する必要があります。\n                <br><br>\n                <a href="room-registration.php?line_user_id=${encodeURIComponent(o)}" class="registration-link">部屋を登録する</a>\n            `,e.style.display="flex";const t=document.createElement("style");t.textContent="\n                .registration-link {\n                    display: inline-block;\n                    background-color: #00B900;\n                    color: white;\n                    padding: 12px 24px;\n                    border-radius: 4px;\n                    text-decoration: none;\n                    font-weight: bold;\n                    margin-top: 10px;\n                }\n                .registration-link:hover {\n                    background-color: #009900;\n                }\n            ",document.head.appendChild(t);const l=document.getElementById("loading");l&&(l.style.display="none")}else console.warn("エラー表示要素が見つからないため、リダイレクトします"),window.location.href="room-registration.php?line_user_id="+encodeURIComponent(o)}(n),!1)))):(console.log("⚠️ LINE IDが取得できませんでしたが、部屋連携必須設定が無効のため続行します"),!0))))):(console.log("⚠️ LINE IDが取得できました。部屋連携設定は無効のため、アプリ初期化完了"),s("部屋連携必須設定無効 - アプリ初期化完了","INFO"),e(),!0)}catch(o){return console.log("❌ LINE IDの取得に失敗しました:",o),s("プロフィール情報の取得に失敗しました: "+o,"ERROR"),r("LINEプロフィールの取得に失敗しました"),Promise.reject(o)}var c})).catch((o=>{if(s("LIFF初期化エラー: "+(o.message||"不明なエラー"),"ERROR"),o.code&&s(`エラーコード: ${o.code}`,"ERROR"),o.details&&s(`エラー詳細: ${JSON.stringify(o.details)}`,"ERROR"),console.log("❌ LIFF初期化エラー:",o.message||"不明なエラー"),o.message&&(o.message.includes("network")||o.message.includes("timeout")||o.message.includes("connection"))&&t<3){t++;const o=`ネットワークエラーのため再試行 (${t}/3)...`;return console.warn("🔄 "+o),s(o,"WARN"),new Promise((o=>{setTimeout((()=>{o(i())}),1500)}))}return console.log("❌ エラーによりログインフラグをクリアします"),localStorage.removeItem(l),localStorage.removeItem(l+"_time"),console.log("🗑️ ログインフラグを削除しました（エラーのため）"),r("LIFFの初期化に失敗しました: "+(o.message||"不明なエラー")),Promise.reject(o)}))}if(window.LIFF_ID){s(`初期化開始 - LIFF ID: ${window.LIFF_ID}`,"INFO"),console.log("LIFF ID設定値:",window.LIFF_ID),console.log("📱 LIFF初期化準備中"),function(){const o=new URLSearchParams(window.location.search),e=o.get("code"),n=o.get("state"),t=o.get("liff.state"),l=o.get("line_user_id"),r=(o.get("liffClientId"),o.get("liffRedirectUri"),e&&n||t||l),i=r?e&&n?"LINE認証コード検出":t?"LIFF状態パラメータあり":l?"LINE IDパラメータあり":"不明":"通常アクセス";console.log("🔍 URLパラメータチェック: "+(r?"LINEからのリダイレクト":"通常アクセス")),console.log(`🔎 詳細: code=${e||"なし"}, state=${n||"なし"}, liff.state=${t||"なし"}, line_user_id=${l||"なし"}`),console.log(`🔄 リダイレクト情報: ${i}`),e&&n&&function(){const o=new URLSearchParams(window.location.search),e={code:o.get("code"),state:o.get("state"),liffState:o.get("liff.state"),liffClientId:o.get("liffClientId"),liffRedirectUri:o.get("liffRedirectUri"),timestamp:Date.now()};if(e.code&&e.state){console.log("🔑 LINE認証コードを検出: セッションストレージに保存します");try{return sessionStorage.setItem("line_auth_params",JSON.stringify(e)),!0}catch(o){console.error("セッションストレージへの保存に失敗:",o)}}}(),s(`LINEリダイレクト検出: ${r}, タイプ=${i}, コード=${!!e}, 状態=${!!n}`,"INFO")}(),console.log("📱 ページ読み込み時のログインフラグチェック");const o=localStorage.getItem(l),e=localStorage.getItem(l+"_time");null===o?console.log("🔍 ログインフラグは設定されていません"):(console.log(`🔍 ログインフラグが存在します: ${o}`),e&&console.log(`⏱️ ログイン時刻: ${new Date(parseInt(e,10)).toLocaleString()}`)),s(`LINEログイン状態フラグ: ${o?"true":"false"}, LINEに${o?"ログインしてます":"ログインしていません"}`,"INFO");const n=void 0===window.LINE_LOGIN_REQUIRED||window.LINE_LOGIN_REQUIRED,t=void 0===window.ROOM_LINK_REQUIRED||window.ROOM_LINK_REQUIRED;console.log("⚙️ LINEログイン必須設定:",n?"有効":"無効"),console.log("⚙️ 部屋連携必須設定:",t?"有効":"無効")}else s("LIFF IDが設定されていません","ERROR"),console.error("LIFF IDが見つかりません"),console.log("❌ LIFF ID未設定エラー");"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(function(){s("DOMContentLoaded - LIFF初期化を待機中","INFO"),console.log("⏳ DOMContentLoaded - LIFF初期化を待機中..."),setTimeout(i,1e3)})):(s("DOM既読み込み - LIFF初期化を開始","INFO"),console.log("🚀 DOM既読み込み - LIFF初期化を開始します"),setTimeout(i,1e3)),window.initializeLIFF=i})()})();